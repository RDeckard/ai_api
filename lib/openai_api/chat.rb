# frozen_string_literal: true

module OpenAIApi
  class Chat < Base
    API_PATH = "/v1/chat/completions"
    API_VERB = "post"

    # rubocop:disable Layout/LineLength
    API_PARAMS = [
      {
        name: "model",
        types: %w[string],
        required: true,
        default_value: "gpt-3.5-turbo",
        description: "ID of the model to use. You can use the Model API to see all of your available models."
      },
      {
        name: "messages",
        types: %w[array],
        required: true,
        description: "The messages to generate chat completions for, in the chat format."
      },
      {
        name: "temperature",
        types: %w[float integer],
        required: false,
        description: "Defaults to 1. What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both."
      },
      {
        name: "top_p",
        types: %w[float integer],
        required: false,
        description: "Defaults to 1. An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both."
      },
      {
        name: "n",
        types: %w[integer],
        required: false,
        description: "How many completions to generate for each prompt. Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop."
      },
      {
        name: "stream",
        types: %w[boolean],
        required: false,
        description: "Defaults to false. If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message."
      },
      {
        name: "stop",
        types: %w[array string],
        required: false,
        description: "Defaults to null. Up to 4 sequences where the API will stop generating further tokens."
      },
      {
        name: "max_tokens",
        types: %w[integer],
        required: false,
        description: "Defaults to inf. The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens)."
      },
      {
        name: "presence_penalty",
        types: %w[float integer],
        required: false,
        description: "Defaults to 0. Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics."
      },
      {
        name: "frequency_penalty",
        types: %w[float integer],
        required: false,
        description: "Defaults to 0. Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."
      },
      {
        name: "logit_bias",
        types: %w[hash],
        required: false,
        description: "Defaults to null. Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token."
      },
      {
        name: "user",
        types: %w[string],
        required: false,
        description: "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."
      }
    ].freeze
    # rubocop:enable Layout/LineLength

    RESPONSE_DIGGER = proc { _1.dig("choices", 0, "message", "content").strip }

    def call(messages = [], **options_and_api_params)
      super(messages:, **options_and_api_params)
    end
  end
end
